**TaskApiServerApplication.java**

package com.nhnacademy.springboot.taskapiserver;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class TaskApiServerApplication {

    public static void main(String[] args) {
        SpringApplication.run(TaskApiServerApplication.class, args);
    }

}



**AuthType.java**

package com.nhnacademy.springboot.taskapiserver.domain;

public enum AuthType {
    ADMIN, MEMBER
}


**ProjectService.java**

package com.nhnacademy.springboot.taskapiserver.domain.project;

public interface ProjectService {

    Project createService(Project project);

    Project getProjectNameById(Long id);



}



**ProjectServiceImpl.java**

package com.nhnacademy.springboot.taskapiserver.domain.project;

import org.springframework.stereotype.Service;

@Service
public class ProjectServiceImpl implements ProjectService {

    private final ProjectRepository projectRepository;

    public ProjectServiceImpl(ProjectRepository projectRepository) {
        this.projectRepository = projectRepository;
    }

    @Override
    public Project createService(Project project) {
        if (projectRepository.existsById(project.getProjectId())) {
            throw new IllegalArgumentException("이미 존재: " + project.getProjectId());
        }
        return projectRepository.save(project);
    }


    @Override
    public Project getProjectNameById(Long id) {
        return projectRepository.findById(id)
                .orElse(null);
    }

}



**ProjectRepository.java**

package com.nhnacademy.springboot.taskapiserver.domain.project;

import org.springframework.data.jpa.repository.JpaRepository;

public interface ProjectRepository extends JpaRepository<Project, Long> {
}



**Project.java**

package com.nhnacademy.springboot.taskapiserver.domain.project;

import com.nhnacademy.springboot.taskapiserver.domain.task.Task;
import lombok.Getter;

import javax.persistence.*;
import java.util.List;

@Entity
@Getter
public class Project {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long projectId;

    private String projectName;

    private String content;

    private StatusType status;

    @OneToMany(mappedBy = "project", cascade = CascadeType.ALL)
    private List<Task> tasks;

    @Getter
    public enum StatusType {
        ACTIVE,
        SLEEP,
        TERMINATION
    }
}



**MemberRepository.java**

package com.nhnacademy.springboot.taskapiserver.domain.member;

import org.springframework.data.jpa.repository.JpaRepository;

public interface MemberRepository extends JpaRepository<Member, Long> {

    boolean existsByMemberId(String memberId);
}



**MemberServiceImpl.java**

package com.nhnacademy.springboot.taskapiserver.domain.member;

import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class MemberServiceImpl implements MemberService {

    private final MemberRepository memberRepository;

    public MemberServiceImpl(MemberRepository memberRepository) {
        this.memberRepository = memberRepository;
    }

    @Override
    public List<Member> getMembers() {
        return memberRepository.findAll();
    }

    @Override
    public Member getMember(Long id) {
        return memberRepository.findById(id)
                .orElse(null);
    }

    @Override
    public Member createMember(Member member) {
        if (memberRepository.existsByMemberId(member.getMemberId())) {
            throw new IllegalStateException("Already exist ID: " + member.getMemberId());
        }
        return memberRepository.save(member);
    }

    @Override
    public void delete(Member member) {
        memberRepository.delete(member);
    }
}



**Member.java**

package com.nhnacademy.springboot.taskapiserver.domain.member;

import com.nhnacademy.springboot.taskapiserver.domain.AuthType;
import com.nhnacademy.springboot.taskapiserver.domain.project.Project;
import lombok.Getter;

import javax.persistence.*;

@Getter
@Entity
public class Member {

    @Id
    private String memberId;

    @ManyToOne
    @JoinColumn(name = "projectId")
    private Project project;

    @Enumerated(EnumType.STRING)
    private AuthType auth;
}



**MemberService.java**

package com.nhnacademy.springboot.taskapiserver.domain.member;

import java.util.List;

public interface MemberService {

    List<Member> getMembers();

    Member getMember(Long id);

    Member createMember(Member member);

    void delete(Member member);
}



**TaskTagsServiceImpl.java**

package com.nhnacademy.springboot.taskapiserver.domain.taskTags;

import com.nhnacademy.springboot.taskapiserver.domain.tag.TagRepository;
import com.nhnacademy.springboot.taskapiserver.domain.task.TaskRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class TaskTagsServiceImpl implements TaskTagsService {

    private final TaskTagsRepository taskTagsRepository;
    private final TaskRepository taskRepository;
    private final TagRepository tagRepository;

    @Autowired
    public TaskTagsServiceImpl(TaskTagsRepository taskTagsRepository,
                               TaskRepository taskRepository,
                               TagRepository tagRepository) {
        this.taskTagsRepository = taskTagsRepository;
        this.taskRepository = taskRepository;
        this.tagRepository = tagRepository;
    }

    @Override
    public TaskTags assignTagToTask(Long taskId, Long tagId) {
        return taskRepository.findById(taskId).flatMap(task ->
                tagRepository.findById(tagId).map(tag -> {
                    TaskTags taskTags = new TaskTags();
                    taskTags.setTask(task);
                    taskTags.setTag(tag);
                    return taskTagsRepository.save(taskTags);
                })
        ).orElseThrow(() -> new RuntimeException("Task or Tag 없음"));
    }

    @Override
    public void unAssignTagFromTask(Long taskTagId) {
        taskTagsRepository.deleteById(taskTagId);
    }
}


**TaskTagsRepository.java**

package com.nhnacademy.springboot.taskapiserver.domain.taskTags;

import org.springframework.data.jpa.repository.JpaRepository;

public interface TaskTagsRepository extends JpaRepository<TaskTags, Long> {
}



**TaskTagsService.java**

package com.nhnacademy.springboot.taskapiserver.domain.taskTags;

public interface TaskTagsService {
    TaskTags assignTagToTask(Long taskId, Long tagId);
    void unAssignTagFromTask(Long taskTagId);
}


**TaskTags.java**

package com.nhnacademy.springboot.taskapiserver.domain.taskTags;

import com.nhnacademy.springboot.taskapiserver.domain.tag.Tag;
import com.nhnacademy.springboot.taskapiserver.domain.task.Task;
import lombok.Getter;
import lombok.Setter;

import javax.persistence.*;

@Entity
@Getter
@Setter
public class TaskTags {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long taskTagId;

    @ManyToOne
    @JoinColumn(name = "taskId")
    private Task task;

    @ManyToOne
    @JoinColumn(name = "tagId")
    private Tag tag;


}



**TagRepository.java**

package com.nhnacademy.springboot.taskapiserver.domain.tag;

import com.nhnacademy.springboot.taskapiserver.domain.project.Project;
import org.springframework.data.jpa.repository.JpaRepository;

public interface TagRepository extends JpaRepository<Tag, Long> {

    boolean existsByProjectAndTagName(Project project, String tagName);
}



**TagServiceImpl.java**

package com.nhnacademy.springboot.taskapiserver.domain.tag;

import com.nhnacademy.springboot.taskapiserver.domain.project.Project;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class TagServiceImpl implements TagService {

    private final TagRepository tagRepository;

    public TagServiceImpl(TagRepository tagRepository) {
        this.tagRepository = tagRepository;
    }

    @Override
    public List<Tag> getTags() {
        return tagRepository.findAll();
    }

    @Override
    public Tag getTag(Long id) {
        return tagRepository.findById(id)
                .orElse(null);
    }


    @Override
    public void registerTag(Tag tag) {
        if (tagRepository.existsByProjectAndTagName(tag.getProject(), tag.getTagName())) {
            throw new IllegalStateException("Already exist tagName: " + tag.getTagName());
        }
        tagRepository.save(tag);
    }

    @Override
    public void modifyTagName(Tag tag) {
        tagRepository.findById(tag.getTagId()).ifPresent(targetTage -> {
            targetTage.setTagName(tag.getTagName());
            tagRepository.save(targetTage);
        });
    }

    @Override
    public void deleteTag(Tag tag) {
        tagRepository.delete(tag);
    }

    @Override
    public boolean isTagNameExistsInProject(Project project, String tagName) {
        return tagRepository.existsByProjectAndTagName(project, tagName);
    }
}



**TagService.java**

package com.nhnacademy.springboot.taskapiserver.domain.tag;

import com.nhnacademy.springboot.taskapiserver.domain.project.Project;

import java.util.List;

public interface TagService {

    List<Tag> getTags();

    Tag getTag(Long id);

    void registerTag(Tag tag);
    void modifyTagName(Tag tag);
    void deleteTag(Tag tag);

    boolean isTagNameExistsInProject(Project project, String tagName);
}



**Tag.java**

package com.nhnacademy.springboot.taskapiserver.domain.tag;

import com.nhnacademy.springboot.taskapiserver.domain.project.Project;
import lombok.Getter;
import lombok.Setter;

import javax.persistence.*;

@Entity
@Getter
@Setter
public class Tag {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long tagId;

    @ManyToOne
    @JoinColumn(name = "projectId")
    private Project project;

    private String tagName;
}



**CommentServiceImpl.java**

package com.nhnacademy.springboot.taskapiserver.domain.comment;

import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class CommentServiceImpl implements CommentService{

    private final CommentRepository commentRepository;


    public CommentServiceImpl(CommentRepository commentRepository) {
        this.commentRepository = commentRepository;
    }

    @Override
    public List<Comment> getComments() {
        return commentRepository.findAll();
    }

    @Override
    public Comment getComment(Long id) {
        return commentRepository.findById(id)
                .orElse(null);
    }

    @Override
    public void deleteComment(Comment comment) {
        commentRepository.delete(comment);
    }

    @Override
    public void modifyCommentContent(Comment comment) {
        commentRepository.findById(comment.getCommentId()).ifPresent(
                targetComment -> {
                    targetComment.setContent(comment.getContent());
                    commentRepository.save(targetComment);
                });
    }
}



**Comment.java**

package com.nhnacademy.springboot.taskapiserver.domain.comment;

import com.nhnacademy.springboot.taskapiserver.domain.member.Member;
import com.nhnacademy.springboot.taskapiserver.domain.task.Task;
import lombok.Getter;
import lombok.Setter;

import javax.persistence.*;

@Entity
@Getter
@Setter
public class Comment {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long commentId;

    private String content;

    private String adminId;

    @ManyToOne
    @JoinColumn(name = "taskId")
    private Task task;

    @ManyToOne
    @JoinColumn(name = "memberId")
    private Member member;
}



**CommentRepository.java**

package com.nhnacademy.springboot.taskapiserver.domain.comment;

import org.springframework.data.jpa.repository.JpaRepository;

public interface CommentRepository extends JpaRepository<Comment, Long> {
}



**CommentService.java**

package com.nhnacademy.springboot.taskapiserver.domain.comment;

import java.util.List;

public interface CommentService {

    List<Comment> getComments();

    Comment getComment(Long id);
    void deleteComment(Comment comment);

    void modifyCommentContent(Comment comment);


}



**MileStoneRepository.java**

package com.nhnacademy.springboot.taskapiserver.domain.mileStone;

import org.springframework.data.jpa.repository.JpaRepository;

public interface MileStoneRepository extends JpaRepository<MileStone, Long> {
}



**MileStone.java**

package com.nhnacademy.springboot.taskapiserver.domain.mileStone;

import com.nhnacademy.springboot.taskapiserver.domain.project.Project;

import javax.persistence.*;

@Entity
public class MileStone {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long mileStoneId;

    @ManyToOne
    @JoinColumn(name = "projectId")
    private Project project;

    private String mileStoneName;
}



**MileStoneServiceImpl.java**

package com.nhnacademy.springboot.taskapiserver.domain.mileStone;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;

@Service
public class MileStoneServiceImpl implements MileStoneService {
    private final MileStoneRepository mileStoneRepository;

    @Autowired
    public MileStoneServiceImpl(MileStoneRepository mileStoneRepository) {
        this.mileStoneRepository = mileStoneRepository;
    }

    @Override
    public MileStone createMileStone(MileStone mileStone) {
        return mileStoneRepository.save(mileStone);
    }

    @Override
    public Optional<MileStone> findMileStoneById(Long id) {
        return mileStoneRepository.findById(id);
    }

    @Override
    public List<MileStone> findAllMileStones() {
        return mileStoneRepository.findAll();
    }

    @Override
    public MileStone updateMileStone(MileStone mileStone) {
        return mileStoneRepository.save(mileStone);
    }

    @Override
    public void deleteMileStoneById(Long id) {
        mileStoneRepository.deleteById(id);
    }
}


**MileStoneService.java**

package com.nhnacademy.springboot.taskapiserver.domain.mileStone;

import java.util.List;
import java.util.Optional;

public interface MileStoneService {

    MileStone createMileStone(MileStone mileStone);

    Optional<MileStone> findMileStoneById(Long id);

    List<MileStone> findAllMileStones();

    MileStone updateMileStone(MileStone mileStone);

    void deleteMileStoneById(Long id);
}



**Task.java**

package com.nhnacademy.springboot.taskapiserver.domain.task;

import com.nhnacademy.springboot.taskapiserver.domain.member.Member;
import com.nhnacademy.springboot.taskapiserver.domain.project.Project;
import com.nhnacademy.springboot.taskapiserver.domain.comment.Comment;
import com.nhnacademy.springboot.taskapiserver.domain.mileStone.MileStone;
import lombok.Getter;
import lombok.Setter;

import javax.persistence.*;
import java.util.List;

@Entity
@Getter
@Setter
public class Task {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long taskId;

    @ManyToOne
    @JoinColumn(name = "projectId")
    private Project project;

    @ManyToOne
    @JoinColumn(name = "mileStoneId")
    private MileStone mileStone;

    @ManyToOne
    @JoinColumn(name = "memberId")
    private Member member;

    private String title;

    @OneToMany(mappedBy = "task", cascade = CascadeType.ALL)
    private List<Comment> comments;

}



**TaskRepository.java**

package com.nhnacademy.springboot.taskapiserver.domain.task;

import org.springframework.data.jpa.repository.JpaRepository;

public interface TaskRepository extends JpaRepository<Task, Long> {
}



**TaskService.java**

package com.nhnacademy.springboot.taskapiserver.domain.task;

import com.nhnacademy.springboot.taskapiserver.domain.comment.Comment;

import java.util.List;

public interface TaskService {


    //todo 01: Task 를 등록/수정/삭제 (Project Member only)
    Task registerTask(Task task);
    void modifyTaskComment(Task task);
    void deleteTask(Long taskId);


    //todo 02: Project 멤버는 Task 의 목록 및 내용을 확인 할 수 있습니다.
    List<Task> getTasks();
    List<Comment> getTaskComment(Long id);


    Task modifyTask(Long taskId, Task task);
}



**TaskServiceImpl.java**

package com.nhnacademy.springboot.taskapiserver.domain.task;

import com.nhnacademy.springboot.taskapiserver.domain.comment.Comment;
import org.springframework.stereotype.Service;

import java.util.Collections;
import java.util.List;

@Service
public class TaskServiceImpl implements TaskService {

    private final TaskRepository taskRepository;

    public TaskServiceImpl(TaskRepository taskRepository) {
        this.taskRepository = taskRepository;
    }

    @Override
    public Task registerTask(Task task) {
        return taskRepository.save(task);
    }

    @Override
    public void modifyTaskComment(Task task) {
        taskRepository.findById(task.getTaskId()).ifPresent(
                targetTask -> {
                    targetTask.setComments(task.getComments());
                    taskRepository.save(targetTask);
                });
    }

    @Override
    public void deleteTask(Long taskId) {
        taskRepository.deleteById(taskId);
    }

    @Override
    public List<Task> getTasks() {
        return taskRepository.findAll();
    }

    @Override
    public List<Comment> getTaskComment(Long id) {
        return taskRepository.findById(id)
                .map(Task::getComments)
                .orElse(Collections.emptyList());
    }

    @Override
    public Task modifyTask(Long taskId, Task task) {
        return null;
    }
}



**TaskController.java**

package com.nhnacademy.springboot.taskapiserver.controller;

import com.nhnacademy.springboot.taskapiserver.domain.task.Task;
import com.nhnacademy.springboot.taskapiserver.domain.task.TaskService;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/tasks")
public class TaskController {

    private final TaskService taskService;

    public TaskController(TaskService taskService) {
        this.taskService = taskService;
    }

    @PostMapping
    public ResponseEntity<Task> createTask(@RequestBody Task task) {
        Task createdTask = taskService.registerTask(task);
        return ResponseEntity.ok(createdTask);
    }


    @PutMapping("/{taskId}")
    public ResponseEntity<Task> updateTask(@PathVariable Long taskId, @RequestBody Task task) {
        Task updatedTask = taskService.modifyTask(taskId, task);
        return ResponseEntity.ok(updatedTask);
    }

    @DeleteMapping("/{taskId}")
    public ResponseEntity<Void> deleteTask(@PathVariable Long taskId) {
        taskService.deleteTask(taskId);
        return ResponseEntity.noContent().build();
    }

    @GetMapping
    public ResponseEntity<List<Task>> getAllTasks() {
        List<Task> tasks = taskService.getTasks();
        return ResponseEntity.ok(tasks);
    }

    @GetMapping("/{taskId}")
    public ResponseEntity<Task> getTask(@PathVariable Long taskId) {
        Task task = taskService.getTask(taskId);
        return ResponseEntity.ok(task);
    }
}



**ProjectController.java**

package com.nhnacademy.springboot.taskapiserver.controller;

import com.nhnacademy.springboot.taskapiserver.domain.project.Project;
import com.nhnacademy.springboot.taskapiserver.domain.project.ProjectService;
import com.nhnacademy.springboot.taskapiserver.domain.member.MemberService;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/projects")
public class ProjectController {

    private final ProjectService projectService;
    private final MemberService memberService;

    public ProjectController(ProjectService projectService, MemberService memberService) {
        this.projectService = projectService;
        this.memberService = memberService;
    }

    @PostMapping
    public ResponseEntity<Project> createProject(@RequestBody Project project) {
        Project createdProject = projectService.createProject(project);
        return ResponseEntity.ok(createdProject);
    }

    @PutMapping("/{projectId}")
    public ResponseEntity<Project> updateProjectStatus(@PathVariable Long projectId, @RequestBody Project.StatusType status) {
        Project updatedProject = projectService.updateProjectStatus(projectId, status);
        return ResponseEntity.ok(updatedProject);
    }

    @PostMapping("/{projectId}/members")
    public ResponseEntity<Void> addMemberToProject(@PathVariable Long projectId, @RequestBody String memberId) {
        memberService.addMemberToProject(projectId, memberId);
        return ResponseEntity.ok().build();
    }

    @DeleteMapping("/{projectId}/members/{memberId}")
    public ResponseEntity<Void> removeMemberFromProject(@PathVariable Long projectId, @PathVariable String memberId) {
        memberService.removeMemberFromProject(projectId, memberId);
        return ResponseEntity.ok().build();
    }

    @GetMapping
    public ResponseEntity<List<Project>> getAllProjects() {
        List<Project> projects = projectService.getAllProjects();
        return ResponseEntity.ok(projects);
    }

    @GetMapping("/{projectId}")
    public ResponseEntity<Project> getProject(@PathVariable Long projectId) {
        Project project = projectService.getProjectById(projectId);
        return ResponseEntity.ok(project);
    }
}



**TaskApiServerApplicationTests.java**

package com.nhnacademy.springboot.taskapiserver;

import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
class TaskApiServerApplicationTests {

    @Test
    void contextLoads() {
    }

}



**pom.xml**

<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.7.18</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>
    <groupId>com.nhnacademy.springboot</groupId>
    <artifactId>task-api-server</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>task-api-server</name>
    <description>task-api-server</description>
    <properties>
        <java.version>11</java.version>
    </properties>
    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>


        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-thymeleaf</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <scope>runtime</scope>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>com.mysql</groupId>
            <artifactId>mysql-connector-j</artifactId>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-configuration-processor</artifactId>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>

    </dependencies>



    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>

</project>



**application.properties**





